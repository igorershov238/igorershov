# Д.З Пользователь вводит коефициенты a,b,c квадратного уравнения
#     Найти корни уравнения
# !!! переделать на вещественные коэфициенты
#     использовать стандартную операцию возведения в степень (**)
import math
a = float(input('Введите число a: '))
b = float(input('Введите число b: '))
c = float(input('Введите число c: '))

D = b**2 - 4 * a * c
print('Дискриминант равен :', D)
x1 = (-b + D**0.5)/2 * a
x2 = (-b - D**0.5)/2 * a
#for i in range(1):
# if - оператор влетвления, позволяющий организовать несколько веточек кода
#      каждая из которых будет выполняться взависимости от некоторого условия
# Условие (condition) - это выражение логического типа данных    (bool)
if D < 0:
    print('Уравнение ',a,'x2+',b,'x+',c,'=0 не имеет корней', sep='')
elif D > 0:
    print('Уравнение ',a,'x2+',b,'x+',c,'=0 имеет 2 корня', sep='')
    #print(x1, x2,)
    # Вар 1.
    # print('--------------------------------')
    # print(f'| x1 = {x1:8.3} | x2 = {x2:8.3}|')
    # print('--------------------------------')
    # Вар 2. Динамически находим длину диномической строки для дальнейшего форматирования
    result = f'| x1 = {x1:8.3} | x2 = {x2:8.3} |'
    lenght_result = len(result)    # Нахождение длины результирующей строки
    print('-' * lenght_result)    # Повторение строки указанная кол-во раз (repeat)
    print(result)
    print('-' * lenght_result)
else:
    print('Уравнение ',a,'x2+',b,'x+',c,'=0 имеет 1 корень', sep='')
    # Д.З Оформить в виде таблицы
    result1 = f'| x1 = {x1:8.3} |'
    lenght_result1 = len(result1)
    print('-' * lenght_result1)
    print(result1)
    print('-' * lenght_result1)

# Debugger - подсистема среды разработки (PyCharm), которая позволяет исправлять алгоритмические ошибки (bugs)
#            отладчик позволяет выполнять программу строчка за строчкой при этом отслеживая значения переменных
# Breakpoint - точка останова после которой выполнение программы переходит в пошаговый режим
